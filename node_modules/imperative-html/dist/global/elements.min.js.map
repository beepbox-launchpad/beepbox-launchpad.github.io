{"version":3,"sources":["../../src/elements-base.ts","../../src/elements.ts"],"names":["applyElementArgs","element","args","args_1","__values","args_1_1","next","done","arg","value","Node","appendChild","document","createTextNode","Array","isArray","Symbol","iterator","__spread","constructor","Object","Element","_d","e_2","keys","_e","key","setAttribute","join","console","warn","tagName","_f","e_3","_g","styleKey","style","setProperty","removeAttribute","svgNS","parseHTML","_i","arguments","length","createRange","createContextualFragment","parseSVG","fragment","createDocumentFragment","svgParser","DOMParser","parseFromString","documentElement","firstChild","importNode","HTML","SVG","Proxy","uppercasePattern_1","RegExp","e","get","target","name","kebabCaseName","replace","c","toLowerCase","createElement","createElementNS","name_1","_c","split","name_2","test","snakeCaseName","DocumentFragment","currentScript","readyState","scripts","getElementsByTagName","parentNode","replaceChild"],"mappings":"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","sourcesContent":["// Copyright (C) John Nesky, distributed under the MIT license.\n\nexport function applyElementArgs<T extends HTMLElement | SVGElement | DocumentFragment>(element: T, args: Array<any>): T {\n\tfor (const arg of args) {\n\t\tif (arg instanceof Node) {\n\t\t\telement.appendChild(arg);\n\t\t} else if (typeof arg === \"string\") {\n\t\t\telement.appendChild(document.createTextNode(arg));\n\t\t} else if (typeof arg === \"function\") {\n\t\t\tapplyElementArgs(element, [arg()]);\n\t\t} else if (Array.isArray(arg)) {\n\t\t\tapplyElementArgs(element, arg);\n\t\t} else if (arg && typeof Symbol !== \"undefined\" && typeof arg[Symbol.iterator] === \"function\") {\n\t\t\tapplyElementArgs(element, [...arg]);\n\t\t} else if (arg && arg.constructor === Object && element instanceof Element) {\n\t\t\t// If the argument is a literal {} Object\n\t\t\tfor (const key of Object.keys(arg)) {\n\t\t\t\tconst value = arg[key];\n\t\t\t\t/*if (key === \"classList\") {\n\t\t\t\t\tif (typeof value === \"string\") {\n\t\t\t\t\t\telement.classList.add(...value.split(\" \"));\n\t\t\t\t\t} else if (Array.isArray(arg) || (value && typeof Symbol !== \"undefined\" && typeof value[Symbol.iterator] === \"function\")) {\n\t\t\t\t\t\telement.classList.add(...value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\"Invalid classList value \\\"\" + value + \"\\\" on \" + element.tagName + \" element.\");\n\t\t\t\t\t}\n\t\t\t\t} else*/ if (key === \"class\" /* || key === \"className\" */) {\n\t\t\t\t\tif (typeof value === \"string\") {\n\t\t\t\t\t\telement.setAttribute(\"class\", value);\n\t\t\t\t\t} else if (Array.isArray(arg) || (value && typeof Symbol !== \"undefined\" && typeof value[Symbol.iterator] === \"function\")) {\n\t\t\t\t\t\telement.setAttribute(\"class\", [...value].join(\" \"));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\"Invalid \" + key + \" value \\\"\" + value + \"\\\" on \" + element.tagName + \" element.\");\n\t\t\t\t\t}\n\t\t\t\t} else if (key === \"style\") {\n\t\t\t\t\tif (value && value.constructor === Object) {\n\t\t\t\t\t\tfor (const styleKey of Object.keys(value)) {\n\t\t\t\t\t\t\tif (styleKey in (<HTMLElement | SVGElement>element).style) {\n\t\t\t\t\t\t\t\t// In practice, camelCase and kebab-case properties both work as properties on CSSStyleDeclaration objects.\n\t\t\t\t\t\t\t\t(<any> element).style[styleKey] = value[styleKey];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// CSS variables start with -- and must be set with setProperty.\n\t\t\t\t\t\t\t\t(<HTMLElement | SVGElement>element).style.setProperty(styleKey, value[styleKey]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\telement.setAttribute(key, value);\n\t\t\t\t\t}\n\t\t\t\t} else if (typeof(value) === \"function\") {\n\t\t\t\t\t// If value is a callback, set as a property instead trying to coerce to string.\n\t\t\t\t\t(<any>element)[key] = value;\n\t\t\t\t} else if (typeof(value) === \"boolean\") {\n\t\t\t\t\t// If value is boolean, set attribute if true, remove if false.\n\t\t\t\t\tif (value) element.setAttribute(key, \"\");\n\t\t\t\t\telse element.removeAttribute(key);\n\t\t\t\t} else {\n\t\t\t\t\t// Default to setting attribute, as if writing html directly.\n\t\t\t\t\telement.setAttribute(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// Just convert unrecognized objects to text and append them.\n\t\t\telement.appendChild(document.createTextNode(arg));\n\t\t}\n\t}\n\treturn element;\n}\n\nexport const svgNS: string = \"http://www.w3.org/2000/svg\";\n\nexport function parseHTML(...args: Array<any>): DocumentFragment {\n\treturn document.createRange().createContextualFragment(args.join());\n}\n\n//let svgParser: SVGSVGElement | null = null;\nexport function parseSVG(...args: Array<any>): DocumentFragment {\n\tconst fragment: DocumentFragment = document.createDocumentFragment();\n\t\n\t// Internet Explorer doesn't support the first method here, so I commented it out and used a slightly more complex one involving DOMParser below.\n\t/*\n\tif (svgParser === null) svgParser = <SVGSVGElement>document.createElementNS(svgNS, \"svg\");\n\tsvgParser.innerHTML = args.join();\n\twhile (svgParser.firstChild !== null) fragment.appendChild(svgParser.firstChild);\n\t*/\n\tconst svgParser: Element = new DOMParser().parseFromString(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\">\" + args.join() + \"</svg>\", \"image/svg+xml\").documentElement;\n\twhile (svgParser.firstChild !== null) {\n\t\tdocument.importNode(svgParser.firstChild, true);\n\t\tfragment.appendChild(svgParser.firstChild);\n\t}\n\t\n\treturn fragment;\n}\n\nexport function replaceScriptWith(...args: Array<any>): void {\n\tlet currentScript: HTMLScriptElement | SVGScriptElement | null = document.currentScript;\n\tif (currentScript == null) { // double-equals to intentionally include undefined in Internet Explorer.\n\t\t\n\t\t// Internet Explorer doens't support currentScript, try this method instead:\n\t\tif (document.readyState === \"loading\") {\n\t\t\tconst scripts: HTMLCollectionOf<HTMLScriptElement> = document.getElementsByTagName(\"script\");\n\t\t\tcurrentScript = scripts[scripts.length - 1];\n\t\t}\n\t\t\n\t\tif (currentScript == null) {\n\t\t\tconsole.warn(\"Couldn't replace script because no script is currently being parsed and executed, maybe this is happening in a callback function or event handler instead?\");\n\t\t\treturn;\n\t\t}\n\t}\n\tif (currentScript.parentNode === null) {\n\t\tconsole.warn(\"Couldn't replace script element because it is not attached to a parent anymore, did you try to replace the same script more than once?\");\n\t\treturn;\n\t}\n\tcurrentScript.parentNode.replaceChild(applyElementArgs(document.createDocumentFragment(), args), currentScript);\n}\n\nexport function applyToElement<T extends HTMLElement | SVGElement | DocumentFragment>(element: T, ...args: Array<any>): T {\n\tif (!(element instanceof Element || element instanceof DocumentFragment)) {\n\t\tconsole.warn(\"Couldn't apply to provided argument because it's not an element or DocumentFragment.\");\n\t\treturn element;\n\t}\n\treturn applyElementArgs(element, args);\n}\n","// Copyright (C) John Nesky, distributed under the MIT license.\n\nimport {applyElementArgs, svgNS, parseHTML, parseSVG, replaceScriptWith, applyToElement} from \"./elements-base.js\";\nexport {replaceScriptWith, applyToElement};\n\ninterface HTMLElementFactory {\n\t(...args: Array<string>): DocumentFragment;\n\treadonly [key: string]: (...args: Array<any>) => HTMLElement;\n\ta(...args: Array<any>): HTMLAnchorElement;\n\tabbr(...args: Array<any>): HTMLElement;\n\taddress(...args: Array<any>): HTMLElement;\n\tarea(...args: Array<any>): HTMLAreaElement;\n\tarticle(...args: Array<any>): HTMLElement;\n\taside(...args: Array<any>): HTMLElement;\n\taudio(...args: Array<any>): HTMLAudioElement;\n\tb(...args: Array<any>): HTMLElement;\n\tbase(...args: Array<any>): HTMLBaseElement;\n\tbdi(...args: Array<any>): HTMLElement;\n\tbdo(...args: Array<any>): HTMLElement;\n\tblockquote(...args: Array<any>): HTMLQuoteElement;\n\tbr(...args: Array<any>): HTMLBRElement;\n\tbutton(...args: Array<any>): HTMLButtonElement;\n\tcanvas(...args: Array<any>): HTMLCanvasElement;\n\tcaption(...args: Array<any>): HTMLTableCaptionElement;\n\tcite(...args: Array<any>): HTMLElement;\n\tcode(...args: Array<any>): HTMLElement;\n\tcol(...args: Array<any>): HTMLTableColElement;\n\tcolgroup(...args: Array<any>): HTMLTableColElement;\n\tdatalist(...args: Array<any>): HTMLDataListElement;\n\tdd(...args: Array<any>): HTMLElement;\n\tdel(...args: Array<any>): HTMLModElement;\n\tdetails(...args: Array<any>): HTMLDetailsElement;\n\tdfn(...args: Array<any>): HTMLElement;\n\tdialog(...args: Array<any>): HTMLDialogElement;\n\tdiv(...args: Array<any>): HTMLDivElement;\n\tdl(...args: Array<any>): HTMLDListElement;\n\tdt(...args: Array<any>): HTMLElement;\n\tem(...args: Array<any>): HTMLElement;\n\tembed(...args: Array<any>): HTMLEmbedElement;\n\tfieldset(...args: Array<any>): HTMLFieldSetElement;\n\tfigcaption(...args: Array<any>): HTMLElement;\n\tfigure(...args: Array<any>): HTMLElement;\n\tfooter(...args: Array<any>): HTMLElement;\n\tform(...args: Array<any>): HTMLFormElement;\n\th1(...args: Array<any>): HTMLHeadingElement;\n\th2(...args: Array<any>): HTMLHeadingElement;\n\th3(...args: Array<any>): HTMLHeadingElement;\n\th4(...args: Array<any>): HTMLHeadingElement;\n\th5(...args: Array<any>): HTMLHeadingElement;\n\th6(...args: Array<any>): HTMLHeadingElement;\n\theader(...args: Array<any>): HTMLElement;\n\thr(...args: Array<any>): HTMLHRElement;\n\ti(...args: Array<any>): HTMLElement;\n\tiframe(...args: Array<any>): HTMLIFrameElement;\n\timg(...args: Array<any>): HTMLImageElement;\n\tinput(...args: Array<any>): HTMLInputElement;\n\tins(...args: Array<any>): HTMLModElement;\n\tkbd(...args: Array<any>): HTMLElement;\n\tlabel(...args: Array<any>): HTMLLabelElement;\n\tlegend(...args: Array<any>): HTMLLegendElement;\n\tli(...args: Array<any>): HTMLLIElement;\n\tlink(...args: Array<any>): HTMLLinkElement;\n\tmain(...args: Array<any>): HTMLElement;\n\tmap(...args: Array<any>): HTMLMapElement;\n\tmark(...args: Array<any>): HTMLElement;\n\tmenu(...args: Array<any>): HTMLMenuElement;\n\tmenuitem(...args: Array<any>): HTMLUnknownElement;\n\tmeta(...args: Array<any>): HTMLMetaElement;\n\tmeter(...args: Array<any>): HTMLMeterElement;\n\tnav(...args: Array<any>): HTMLElement;\n\tnoscript(...args: Array<any>): HTMLElement;\n\tobject(...args: Array<any>): HTMLObjectElement;\n\tol(...args: Array<any>): HTMLOListElement;\n\toptgroup(...args: Array<any>): HTMLOptGroupElement;\n\toption(...args: Array<any>): HTMLOptionElement;\n\toutput(...args: Array<any>): HTMLOutputElement;\n\tp(...args: Array<any>): HTMLParagraphElement;\n\tparam(...args: Array<any>): HTMLParamElement;\n\tpicture(...args: Array<any>): HTMLPictureElement;\n\tpre(...args: Array<any>): HTMLPreElement;\n\tprogress(...args: Array<any>): HTMLProgressElement;\n\tq(...args: Array<any>): HTMLQuoteElement;\n\trp(...args: Array<any>): HTMLElement;\n\trt(...args: Array<any>): HTMLElement;\n\truby(...args: Array<any>): HTMLElement;\n\ts(...args: Array<any>): HTMLElement;\n\tsamp(...args: Array<any>): HTMLElement;\n\tscript(...args: Array<any>): HTMLScriptElement;\n\tsection(...args: Array<any>): HTMLElement;\n\tselect(...args: Array<any>): HTMLSelectElement;\n\tsmall(...args: Array<any>): HTMLElement;\n\tsource(...args: Array<any>): HTMLSourceElement;\n\tspan(...args: Array<any>): HTMLSpanElement;\n\tstrong(...args: Array<any>): HTMLElement;\n\tstyle(...args: Array<any>): HTMLStyleElement;\n\tsub(...args: Array<any>): HTMLElement;\n\tsummary(...args: Array<any>): HTMLElement;\n\tsup(...args: Array<any>): HTMLElement;\n\ttable(...args: Array<any>): HTMLTableElement;\n\ttbody(...args: Array<any>): HTMLTableSectionElement;\n\ttd(...args: Array<any>): HTMLTableCellElement;\n\ttemplate(...args: Array<any>): HTMLTemplateElement;\n\ttextarea(...args: Array<any>): HTMLTextAreaElement;\n\ttfoot(...args: Array<any>): HTMLTableSectionElement;\n\tth(...args: Array<any>): HTMLTableCellElement;\n\tthead(...args: Array<any>): HTMLTableSectionElement;\n\ttime(...args: Array<any>): HTMLTimeElement;\n\ttitle(...args: Array<any>): HTMLTitleElement;\n\ttr(...args: Array<any>): HTMLTableRowElement;\n\ttrack(...args: Array<any>): HTMLTrackElement;\n\tu(...args: Array<any>): HTMLElement;\n\tul(...args: Array<any>): HTMLUListElement;\n\tvar(...args: Array<any>): HTMLElement;\n\tvideo(...args: Array<any>): HTMLVideoElement;\n\twbr(...args: Array<any>): HTMLElement;\n}\n\ninterface SVGElementFactory {\n\t(...args: Array<string>): DocumentFragment;\n\treadonly [key: string]: (...args: Array<any>) => SVGElement;\n\ta(...args: Array<any>): SVGAElement;\n\taltGlyph(...args: Array<any>): SVGElement;\n\taltGlyphDef(...args: Array<any>): SVGElement;\n\taltGlyphItem(...args: Array<any>): SVGElement;\n\tanimate(...args: Array<any>): SVGAnimateElement;\n\tanimateMotion(...args: Array<any>): SVGAnimateMotionElement;\n\tanimateTransform(...args: Array<any>): SVGAnimateTransformElement;\n\tcircle(...args: Array<any>): SVGCircleElement;\n\tclipPath(...args: Array<any>): SVGClipPathElement;\n\t\"color-profile\"(...args: Array<any>): SVGElement;\n\tcolor_profile(...args: Array<any>): SVGElement;\n\tcursor(...args: Array<any>): SVGElement;\n\tdefs(...args: Array<any>): SVGDefsElement;\n\tdesc(...args: Array<any>): SVGDescElement;\n\tdiscard(...args: Array<any>): SVGElement;\n\tellipse(...args: Array<any>): SVGEllipseElement;\n\tfeBlend(...args: Array<any>): SVGFEBlendElement;\n\tfeColorMatrix(...args: Array<any>): SVGFEColorMatrixElement;\n\tfeComponentTransfer(...args: Array<any>): SVGFEComponentTransferElement;\n\tfeComposite(...args: Array<any>): SVGFECompositeElement;\n\tfeConvolveMatrix(...args: Array<any>): SVGFEConvolveMatrixElement;\n\tfeDiffuseLighting(...args: Array<any>): SVGFEDiffuseLightingElement;\n\tfeDisplacementMap(...args: Array<any>): SVGFEDisplacementMapElement;\n\tfeDistantLight(...args: Array<any>): SVGFEDistantLightElement;\n\tfeDropShadow(...args: Array<any>): SVGElement;\n\tfeFlood(...args: Array<any>): SVGFEFloodElement;\n\tfeFuncA(...args: Array<any>): SVGFEFuncAElement;\n\tfeFuncB(...args: Array<any>): SVGFEFuncBElement;\n\tfeFuncG(...args: Array<any>): SVGFEFuncGElement;\n\tfeFuncR(...args: Array<any>): SVGFEFuncRElement;\n\tfeGaussianBlur(...args: Array<any>): SVGFEGaussianBlurElement;\n\tfeImage(...args: Array<any>): SVGFEImageElement;\n\tfeMerge(...args: Array<any>): SVGFEMergeElement;\n\tfeMergeNode(...args: Array<any>): SVGFEMergeNodeElement;\n\tfeMorphology(...args: Array<any>): SVGFEMorphologyElement;\n\tfeOffset(...args: Array<any>): SVGFEOffsetElement;\n\tfePointLight(...args: Array<any>): SVGFEPointLightElement;\n\tfeSpecularLighting(...args: Array<any>): SVGFESpecularLightingElement;\n\tfeSpotLight(...args: Array<any>): SVGFESpotLightElement;\n\tfeTile(...args: Array<any>): SVGFETileElement;\n\tfeTurbulence(...args: Array<any>): SVGFETurbulenceElement;\n\tfilter(...args: Array<any>): SVGFilterElement;\n\tfont(...args: Array<any>): SVGElement;\n\t\"font-face\"(...args: Array<any>): SVGElement;\n\tfont_face(...args: Array<any>): SVGElement;\n\t\"font-face-format\"(...args: Array<any>): SVGElement;\n\tfont_face_format(...args: Array<any>): SVGElement;\n\t\"font-face-name\"(...args: Array<any>): SVGElement;\n\tfont_face_name(...args: Array<any>): SVGElement;\n\t\"font-face-src\"(...args: Array<any>): SVGElement;\n\tfont_face_src(...args: Array<any>): SVGElement;\n\t\"font-face-uri\"(...args: Array<any>): SVGElement;\n\tfont_face_uri(...args: Array<any>): SVGElement;\n\tforeignObject(...args: Array<any>): SVGForeignObjectElement;\n\tg(...args: Array<any>): SVGGElement;\n\tglyph(...args: Array<any>): SVGElement;\n\tglyphRef(...args: Array<any>): SVGElement;\n\thkern(...args: Array<any>): SVGElement;\n\timage(...args: Array<any>): SVGImageElement;\n\tline(...args: Array<any>): SVGLineElement;\n\tlinearGradient(...args: Array<any>): SVGLinearGradientElement;\n\tmarker(...args: Array<any>): SVGMarkerElement;\n\tmask(...args: Array<any>): SVGMaskElement;\n\tmetadata(...args: Array<any>): SVGMetadataElement;\n\t\"missing-glyph\"(...args: Array<any>): SVGElement;\n\tmissing_glyph(...args: Array<any>): SVGElement;\n\tmpath(...args: Array<any>): SVGElement;\n\tpath(...args: Array<any>): SVGPathElement;\n\tpattern(...args: Array<any>): SVGPatternElement;\n\tpolygon(...args: Array<any>): SVGPolygonElement;\n\tpolyline(...args: Array<any>): SVGPolylineElement;\n\tradialGradient(...args: Array<any>): SVGRadialGradientElement;\n\trect(...args: Array<any>): SVGRectElement;\n\tscript(...args: Array<any>): SVGScriptElement;\n\tset(...args: Array<any>): SVGElement;\n\tstop(...args: Array<any>): SVGStopElement;\n\tstyle(...args: Array<any>): SVGStyleElement;\n\tsvg(...args: Array<any>): SVGSVGElement;\n\tswitch(...args: Array<any>): SVGSwitchElement;\n\tsymbol(...args: Array<any>): SVGSymbolElement;\n\ttext(...args: Array<any>): SVGTextElement;\n\ttextPath(...args: Array<any>): SVGTextPathElement;\n\ttitle(...args: Array<any>): SVGTitleElement;\n\ttref(...args: Array<any>): SVGElement;\n\ttspan(...args: Array<any>): SVGTSpanElement;\n\tuse(...args: Array<any>): SVGUseElement;\n\tview(...args: Array<any>): SVGViewElement;\n\tvkern(...args: Array<any>): SVGElement;\n}\n\nexport let HTML: HTMLElementFactory = <HTMLElementFactory> <unknown> parseHTML;\nexport let SVG: SVGElementFactory = <SVGElementFactory> <unknown> parseSVG;\n\nif (typeof Proxy !== \"undefined\") {\n\t//const uppercasePattern: RegExp = /\\p{Uppercase}/ug; // ASCII-only fallback required for Internet Explorer.\n\tlet uppercasePattern = /[A-Z]/g; try { uppercasePattern = new RegExp(\"\\\\p{Uppercase}\", \"ug\"); } catch(e){};\n\n\tHTML = <HTMLElementFactory> <unknown> new Proxy(parseHTML, {\n\t\tget: function(target: any, name: string) {\n\t\t\tconst kebabCaseName = name.replace(uppercasePattern, (c: string) => \"-\" + c.toLowerCase()).replace(/^-/, \"\").replace(/_/g, \"-\");\n\t\t\treturn (...args: Array<any>) => applyElementArgs(document.createElement(kebabCaseName), args);\n\t\t},\n\t});\n\n\tSVG = <SVGElementFactory> <unknown> new Proxy(parseSVG, {\n\t\tget: function(target: any, name: string) {\n\t\t\tconst kebabCaseName = name.replace(/_/g, \"-\");\n\t\t\treturn (...args: Array<any>) => applyElementArgs(<SVGElement> document.createElementNS(svgNS, kebabCaseName), args);\n\t\t},\n\t});\n} else {\n\tconsole.warn(\"imperative-html could not find a definition for Proxy, which means that custom elements won't be supported! Try a newer browser.\");\n\tfor (const name of \"a abbr address area article aside audio b base bdi bdo blockquote br button canvas caption cite code col colgroup datalist dd del details dfn dialog div dl dt em embed fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 header hr i iframe img input ins kbd label legend li link main map mark menu menuitem meta meter nav noscript object ol optgroup option output p param picture pre progress q rp rt ruby s samp script section select small source span strong style sub summary sup table tbody td template textarea tfoot th thead time title tr track u ul var video wbr\".split(\" \")) {\n\t\t(<any>HTML)[name] = (...args: Array<any>) => applyElementArgs(document.createElement(name), args);\n\t}\n\tfor (const name of \"a altGlyph altGlyphDef altGlyphItem animate animateMotion animateTransform circle clipPath color-profile cursor defs desc discard ellipse feBlend feColorMatrix feComponentTransfer feComposite feConvolveMatrix feDiffuseLighting feDisplacementMap feDistantLight feDropShadow feFlood feFuncA feFuncB feFuncG feFuncR feGaussianBlur feImage feMerge feMergeNode feMorphology feOffset fePointLight feSpecularLighting feSpotLight feTile feTurbulence filter font font-face font-face-format font-face-name font-face-src font-face-uri foreignObject g glyph glyphRef hkern image line linearGradient marker mask metadata missing-glyph mpath path pattern polygon polyline radialGradient rect script set stop style svg switch symbol text textPath title tref tspan use view vkern\".split(\" \")) {\n\t\t(<any>SVG)[name] = (...args: Array<any>) => applyElementArgs(<SVGElement> document.createElementNS(svgNS, name), args);\n\t\tif (/-/.test(name)) {\n\t\t\tconst snakeCaseName = name.replace(/-/g, \"_\");\n\t\t\t(<any>SVG)[snakeCaseName] = (...args: Array<any>) => applyElementArgs(<SVGElement> document.createElementNS(svgNS, name), args);\n\t\t}\n\t}\n}\n"]}